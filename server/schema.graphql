type Query {
    getUser(pk:String!,sk:String!): user
    allUsers: [user]
    getStores(zipcode: String!): [store]
}


input newuser{
    pk:String!
    sk:String!
    type:String!
    dashboard: inputdashboard,
    user_details: inputuserDetails
}

input inputdashboard{
 messages:[String]
    total_visits:Int
    upcomping_visits:Int
    cancelled_visits:Int
}

input inputuserDetails{
    dob:String
    email:String
    gender:String
    name:String
    phoneno:String
    address:inputaddress
}

input inputaddress{
    province:String
    street:String
}

input inputstoreDetails{
    establishedon:String
    email:String
    size:String
    name:String
    phoneno:String
    zipcode: String
}

input inputstore{
    pk:String!
    sk:String!
    store_details:inputstoreDetails!
}



type user{
    pk:String!
    sk:String!
    type:String!
    user_details: userDetails
    history:history
    dashboard:dashboard
    store_details:storeDetails
    messages:messages
}

type userDetails{
    dob:String
    email:String
    gender:String
    name:String
    phoneno:String
    address:address
}

type address{
    province:String
    street:String
}

type history{
    messages:[String]
}

type messages{
    messages:[String]
}

type dashboard{
    messages:[String]
    total_visits:Int
    upcomping_visits:Int
    cancelled_visits:Int
}

type storeDetails{
    establishedon:String
    email:String
    size:String
    name:String
    phoneno:String
    zipcode:address
}

type store{
    pk:String!
    sk:String!
    store_details:storeDetails!
}




type Mutation {
    createStore(input: inputstore): store
    createUser(input: newuser): user
    deleteUser(pk: String!,sk: String!): String
}

schema {
    query: Query
    mutation: Mutation
}