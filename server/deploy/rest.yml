  createUser:
      handler: src/functions/createUser.createUser
      description: POST /user/register
      events:
        - http:
            method: post
            path: /user/register
            cors:
              origin: "*"
              headers: ${self:custom.allowedHeaders}
            request:
              schema:
                application/json: ${file(src/schema/createUser_request.json)}

  createUserBooking:
    handler: src/functions/createUserBooking.createUserBooking
    description: POST /user/userBooking
    events:
      - http:
          method: post
          path: /user/userBooking
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  checkSlot:
    handler: src/functions/checkAvailability.checkAvailability
    description: POST /user/checkSlot
    events:
      - http:
          method: post
          path: /user/checkSlot
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  createStore:
    handler: src/functions/createStore.createStore
    description: POST /user/register
    events:
      - http:
          method: post
          path: /user/registerStore
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/createStore_request.json)}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
          
  updateRecord:
    handler: src/functions/updateRecord.updateRecord
    description: PATCH /user/updateRecord
    events:
      - http:
          method: patch
          path: /user/updateRecord
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/updateRecord_request.json)}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  bookSlot:
    handler: src/functions/bookSlot.bookSlot
    description: PATCH /user/bookSlot
    events:
      - http:
          method: patch
          path: /user/bookSlot
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
            
  createSlot:
      handler: src/functions/createSlots.createSlots
      description: PATCH /user/createSlot
      events:
        - http:
            method: patch
            path: /user/createSlot
            cors:
              origin: "*"
              headers: ${self:custom.allowedHeaders}
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  deleteUser:
    handler: src/functions/deleteUser.deleteUser
    description: DELETE /user/delete
    events:
      - http:
          method: delete
          path: /user/delete
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/deleteUser_request.json)}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  getUser:
    handler: src/functions/getUser.getUser
    description: POST /user/fetch
    events:
      - http:
          method: POST
          path: /user/fetch
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/getUser_request.json)}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  getUsers:
    handler: src/functions/getUsers.getUsers
    description: GET /user/fetchAll
    events:
      - http:
          method: GET
          path: /user/fetchAll
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer

  updateUser:
    handler: src/functions/updateUser.updateUser
    description: POST /user/update
    events:
      - http:
          method: POST
          path: /user/update
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
  
  getStores:
    handler: src/functions/getStores.getStores
    description: POST /user/getStores
    events:
      - http:
          method: POST
          path: /user/getStores
          cors:
            origin: "*"
            headers: ${self:custom.allowedHeaders}
          request:
            schema:
              application/json: ${file(src/schema/getStores_request.json)}
          authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
  
  triggerStream:
    handler: src/functions/dynamoStream.streamHandler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          StartingPosition: Latest
          arn:
            Fn::GetAtt:
              - ETokenTable
              - StreamArn
  
  graphql:
    handler: src/graphQL/functions/graphql.handler